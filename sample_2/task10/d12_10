{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPeba9y6V+bqqX1/G/Cm7ti"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Task 10: Библиотека Plotly#"],"metadata":{"id":"mh72N1fbA9Nm"}},{"cell_type":"markdown","source":["Task 10: Библиотека Plotly\n","Matplotlib и Seaborn являются действительно многофункциональными библиотеками, которые отлично подходят для решения большинства задач по визуализации данных. Но они не поддерживают функции создания интерактивных диаграмм и анимаций. Для решения такого рода задач применяется библиотека Plotly. В этом упражнении вам нужно будет построить почти такой же график, как и в предыдущем упражнении, но в виде анимации."],"metadata":{"id":"ISEOGe-6A_Z0"}},{"cell_type":"code","source":["import pandas as pd\n","import seaborn as sns\n","from sqlite3 import connect\n","import matplotlib.pyplot as plt\n","import plotly\n","import plotly.graph_objects as go\n","import plotly.express as px\n","import plotly.io as pio\n","import numpy as np"],"metadata":{"id":"zm0zNOuPCoH8","executionInfo":{"status":"ok","timestamp":1665824919069,"user_tz":-180,"elapsed":765,"user":{"displayName":"Александр Коробов","userId":"01380336282562063021"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qWiqQVvTA4KF"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["con = connect('/content/drive/MyDrive/School21/day12/data/checking-logs.sqlite')"],"metadata":{"id":"iNIuyuY2C2ue"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["checker = pd.read_sql('SELECT * FROM checker', con)\n","checker"],"metadata":{"id":"gjD-QRzbC9yu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sql = '''\n","  with num_commits(uid, date) as\n","  (\n","    select  uid, \n","            date(timestamp) as date\n","    from  checker\n","    where uid like \"user_%\"\n","      and labname = \"project1\"\n","      and status = \"ready\"\n","  )\n","  select  uid,\n","          date,\n","          count(*) as qtyTrials\n","  from  num_commits\n","  group by uid, date\n","'''\n","num_commits = pd.read_sql(sql, con)"],"metadata":{"id":"Jdy_oWuTYf4R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_commits"],"metadata":{"id":"F6zOfFFkad7I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_commits = num_commits.sort_values(['date', 'uid']).pivot(index='uid', columns='date', values='qtyTrials').fillna(0).cumsum(axis=1)\n","num_commits"],"metadata":{"id":"QI745AgKarO9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_commits = num_commits.transpose().sort_index().transpose()\n","num_commits.reset_index(inplace = True)\n","num_commits"],"metadata":{"id":"et1Q94RFbaMX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["qtyRows = num_commits.shape[0]\n","qtyCols = num_commits.shape[1]\n","qtyFrames = qtyCols - 1\n","xaxis_range = [0, qtyFrames + 2]\n","x_init = np.array([1])"],"metadata":{"id":"E9OcJuCacE0-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["max_commits = num_commits.drop(columns = 'uid').max().max()"],"metadata":{"id":"8vVMHE0Fc4q5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["init_data = []\n","for user_idx in range(qtyRows):\n","  y_axis = np.array(num_commits.iloc[user_idx,0])\n","  init_data.append(go.Scatter(x = x_init,\n","                              y = y_axis,\n","                              mode = \"lines\", \n","                              name = num_commits.uid[user_idx]))\n","init_max = max_commits"],"metadata":{"id":"w4mfrgkydQQu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["frames = []\n","for f in range(1, qtyFrames + 1):\n","  x_axis = np.arange(1, f + 1)\n","  curr_data = []\n","  title_names = []\n","  for user_idx in range(27):\n","    user = num_commits.uid[user_idx]\n","    y_axis = np.array(num_commits.iloc[user_idx, 1:f+1])\n","    curr_data.append(go.Scatter(x = x_axis, y = y_axis, mode = \"lines+markers\", name = user))\n","  curr_frame = go.Frame(data = curr_data)\n","  frames.append(curr_frame)"],"metadata":{"id":"e--RKLiBeogJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["figure = go.Figure(\n","    data = init_data,\n","    layout = {\n","        \"title\": \"Динамика выполнения пользователем project1\",\n","        \"xaxis\":{\"range\":xaxis_range, \"visible\":True, \"showline\":True},\n","        \"yaxis\":{\"visible\": True, \"showline\": True},\n","        \"updatemenus\":[{\"type\":\"buttons\",\"buttons\":[{\"method\":\"animate\", \"label\":\"play\", \"args\":[None]}]}],\n","        \"width\":1200,\n","        \"height\":500\n","    },\n","    frames = frames, layout_yaxis_range = [0, max_commits]\n",")\n","figure.show()"],"metadata":{"id":"rifLbqLWgI7w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["con.close()"],"metadata":{"id":"fPLHXXgriV23"},"execution_count":null,"outputs":[]}]}